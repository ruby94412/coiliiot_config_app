{"version":3,"file":"static/js/170.f9a0ccf9.chunk.js","mappings":"62KAEaA,EAAb,0CACI,aAAc,6BACV,eAASC,YACJC,UAAY,WACjB,EAAKC,cAAgB,GACrB,EAAKC,WAAa,WAClB,EAAKC,cAAgB,EAAKD,WAAa,GACvC,EAAKE,gBAAkB,WACvB,EAAKC,iBAAmB,QACxB,EAAKC,mBAAqB,WAC1B,EAAKC,iBAAmB,KACxB,EAAKC,wBAA0B,EAC/B,EAAKC,YAAc,CACf,MAAO,EACP,MAAO,GACP,MAAO,GACP,MAAO,GACP,OAAQ,IAEZ,EAAKC,aAAe,WACpB,EAAKC,aAAe,GACpB,EAAKC,cAAgB,GACrB,EAAKC,cAAgB,GACrB,EAAKC,mBAAqB,GAC1B,EAAKC,mBAAqB,GAC1B,EAAKC,YAAc,GACnB,EAAKC,cAAgB,KACrB,EAAKC,mBAAqB,EAC1B,EAAKC,eAAiB,WACtB,EAAKC,WAAaC,EAAAA,GAClB,EAAKC,MAAQD,EAAAA,GACb,EAAKE,WAAaF,EAAAA,GAClB,EAAKG,SAAWH,EAAAA,GAChB,EAAKI,SAAWJ,EAAAA,GAhCN,CAiCb,CAlCL,4FAmCI,WAA2BK,GAA3B,+FACWC,KAAK3B,WADhB,gDAnCJ,+HAsCI,WAAwB0B,GAAxB,+FACW,CAAC,MAAO,iBADnB,2CAtCJ,8HAyCI,WAAuBA,GAAvB,+FAEW,IAFX,2CAzCJ,yEA6CI,SAAKE,GACD,IAAMC,IAAMD,GAAGE,SAAS,IACxB,OAAoB,IAAbD,EAAEE,OAAe,IAAMF,EAAIA,CACrC,GAhDL,oEAiDI,WAAoBH,GAApB,4FAC0BA,EAAOM,SAASL,KAAKR,gBAD/C,mBACUc,EAAwD,IADlE,KAEIP,EAAOQ,MAAM,oBAAsBD,GAC/BA,GAAUN,KAAKT,qBACfQ,EAAOS,cAAgBR,KAAKV,eAJpC,gDAjDJ,sHAwDI,WAAeS,GAAf,gGACqBA,EAAOM,SAASL,KAAKxB,eAD1C,cACQiC,EADR,OAEIA,KAAgB,EAFpB,SAGqBV,EAAOM,SAASL,KAAKxB,cAAgB,GAH1D,cAIIkC,GADIA,EAHR,UAIqB,EAAK,OAChBC,EAAM,IAAIC,WAAW,IACvB,GAAMF,GAAQ,EAAK,IACvBC,EAAI,GAAY,IAAPD,EACTC,EAAI,GAAMF,GAAQ,GAAM,IACxBE,EAAI,GAAMF,GAAQ,GAAM,IACxBE,EAAI,GAAMF,GAAQ,EAAK,IACvBE,EAAI,GAAY,IAAPF,EAXb,kBAYYT,KAAKa,KAAKF,EAAI,IAClB,IACAX,KAAKa,KAAKF,EAAI,IACd,IACAX,KAAKa,KAAKF,EAAI,IACd,IACAX,KAAKa,KAAKF,EAAI,IACd,IACAX,KAAKa,KAAKF,EAAI,IACd,IACAX,KAAKa,KAAKF,EAAI,KAtBtB,iDAxDJ,mFAgFI,SAAeG,EAAQC,GACnB,OAAOA,CACV,KAlFL,GAAgCC,EAAAA,E,+ECFnBA,EAAb,qFACI,SAAeF,EAAQC,GACnB,OAAOA,CACV,KAHL,I","sources":["../node_modules/esptool-js/lib/targets/esp32h2.js","../node_modules/esptool-js/lib/targets/rom.js"],"sourcesContent":["import { ROM } from \"./rom\";\nimport ESP32H2_STUB from \"./stub_flasher/stub_flasher_32h2.json\";\nexport class ESP32H2ROM extends ROM {\n    constructor() {\n        super(...arguments);\n        this.CHIP_NAME = \"ESP32-H2\";\n        this.IMAGE_CHIP_ID = 16;\n        this.EFUSE_BASE = 0x60008800;\n        this.MAC_EFUSE_REG = this.EFUSE_BASE + 0x044;\n        this.UART_CLKDIV_REG = 0x3ff40014;\n        this.UART_CLKDIV_MASK = 0xfffff;\n        this.UART_DATE_REG_ADDR = 0x6000007c;\n        this.FLASH_WRITE_SIZE = 0x400;\n        this.BOOTLOADER_FLASH_OFFSET = 0x0;\n        this.FLASH_SIZES = {\n            \"1MB\": 0x00,\n            \"2MB\": 0x10,\n            \"4MB\": 0x20,\n            \"8MB\": 0x30,\n            \"16MB\": 0x40,\n        };\n        this.SPI_REG_BASE = 0x60002000;\n        this.SPI_USR_OFFS = 0x18;\n        this.SPI_USR1_OFFS = 0x1c;\n        this.SPI_USR2_OFFS = 0x20;\n        this.SPI_MOSI_DLEN_OFFS = 0x24;\n        this.SPI_MISO_DLEN_OFFS = 0x28;\n        this.SPI_W0_OFFS = 0x58;\n        this.USB_RAM_BLOCK = 0x800;\n        this.UARTDEV_BUF_NO_USB = 3;\n        this.UARTDEV_BUF_NO = 0x3fcef14c;\n        this.TEXT_START = ESP32H2_STUB.text_start;\n        this.ENTRY = ESP32H2_STUB.entry;\n        this.DATA_START = ESP32H2_STUB.data_start;\n        this.ROM_DATA = ESP32H2_STUB.data;\n        this.ROM_TEXT = ESP32H2_STUB.text;\n    }\n    async get_chip_description(loader) {\n        return this.CHIP_NAME;\n    }\n    async get_chip_features(loader) {\n        return [\"BLE\", \"IEEE802.15.4\"];\n    }\n    async get_crystal_freq(loader) {\n        // ESP32H2 XTAL is fixed to 32MHz\n        return 32;\n    }\n    _d2h(d) {\n        const h = (+d).toString(16);\n        return h.length === 1 ? \"0\" + h : h;\n    }\n    async _post_connect(loader) {\n        const buf_no = (await loader.read_reg(this.UARTDEV_BUF_NO)) & 0xff;\n        loader.debug(\"In _post_connect \" + buf_no);\n        if (buf_no == this.UARTDEV_BUF_NO_USB) {\n            loader.ESP_RAM_BLOCK = this.USB_RAM_BLOCK;\n        }\n    }\n    async read_mac(loader) {\n        let mac0 = await loader.read_reg(this.MAC_EFUSE_REG);\n        mac0 = mac0 >>> 0;\n        let mac1 = await loader.read_reg(this.MAC_EFUSE_REG + 4);\n        mac1 = (mac1 >>> 0) & 0x0000ffff;\n        const mac = new Uint8Array(6);\n        mac[0] = (mac1 >> 8) & 0xff;\n        mac[1] = mac1 & 0xff;\n        mac[2] = (mac0 >> 24) & 0xff;\n        mac[3] = (mac0 >> 16) & 0xff;\n        mac[4] = (mac0 >> 8) & 0xff;\n        mac[5] = mac0 & 0xff;\n        return (this._d2h(mac[0]) +\n            \":\" +\n            this._d2h(mac[1]) +\n            \":\" +\n            this._d2h(mac[2]) +\n            \":\" +\n            this._d2h(mac[3]) +\n            \":\" +\n            this._d2h(mac[4]) +\n            \":\" +\n            this._d2h(mac[5]));\n    }\n    get_erase_size(offset, size) {\n        return size;\n    }\n}\n","export class ROM {\n    get_erase_size(offset, size) {\n        return size;\n    }\n}\n"],"names":["ESP32H2ROM","arguments","CHIP_NAME","IMAGE_CHIP_ID","EFUSE_BASE","MAC_EFUSE_REG","UART_CLKDIV_REG","UART_CLKDIV_MASK","UART_DATE_REG_ADDR","FLASH_WRITE_SIZE","BOOTLOADER_FLASH_OFFSET","FLASH_SIZES","SPI_REG_BASE","SPI_USR_OFFS","SPI_USR1_OFFS","SPI_USR2_OFFS","SPI_MOSI_DLEN_OFFS","SPI_MISO_DLEN_OFFS","SPI_W0_OFFS","USB_RAM_BLOCK","UARTDEV_BUF_NO_USB","UARTDEV_BUF_NO","TEXT_START","ESP32H2_STUB","ENTRY","DATA_START","ROM_DATA","ROM_TEXT","loader","this","d","h","toString","length","read_reg","buf_no","debug","ESP_RAM_BLOCK","mac0","mac1","mac","Uint8Array","_d2h","offset","size","ROM"],"sourceRoot":""}