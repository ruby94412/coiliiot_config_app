{"version":3,"file":"static/js/470.405b70d2.chunk.js","mappings":"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","sources":["../node_modules/esptool-js/lib/targets/esp32.js","../node_modules/esptool-js/lib/targets/rom.js"],"sourcesContent":["import { ROM } from \"./rom\";\nimport ESP32_STUB from \"./stub_flasher/stub_flasher_32.json\";\nexport class ESP32ROM extends ROM {\n    constructor() {\n        super(...arguments);\n        this.CHIP_NAME = \"ESP32\";\n        this.IMAGE_CHIP_ID = 0;\n        this.EFUSE_RD_REG_BASE = 0x3ff5a000;\n        this.DR_REG_SYSCON_BASE = 0x3ff66000;\n        this.UART_CLKDIV_REG = 0x3ff40014;\n        this.UART_CLKDIV_MASK = 0xfffff;\n        this.UART_DATE_REG_ADDR = 0x60000078;\n        this.XTAL_CLK_DIVIDER = 1;\n        this.FLASH_SIZES = {\n            \"1MB\": 0x00,\n            \"2MB\": 0x10,\n            \"4MB\": 0x20,\n            \"8MB\": 0x30,\n            \"16MB\": 0x40,\n        };\n        this.FLASH_WRITE_SIZE = 0x400;\n        this.BOOTLOADER_FLASH_OFFSET = 0x1000;\n        this.SPI_REG_BASE = 0x3ff42000;\n        this.SPI_USR_OFFS = 0x1c;\n        this.SPI_USR1_OFFS = 0x20;\n        this.SPI_USR2_OFFS = 0x24;\n        this.SPI_W0_OFFS = 0x80;\n        this.SPI_MOSI_DLEN_OFFS = 0x28;\n        this.SPI_MISO_DLEN_OFFS = 0x2c;\n        this.TEXT_START = ESP32_STUB.text_start;\n        this.ENTRY = ESP32_STUB.entry;\n        this.DATA_START = ESP32_STUB.data_start;\n        this.ROM_DATA = ESP32_STUB.data;\n        this.ROM_TEXT = ESP32_STUB.text;\n    }\n    async read_efuse(loader, offset) {\n        const addr = this.EFUSE_RD_REG_BASE + 4 * offset;\n        loader.debug(\"Read efuse \" + addr);\n        return await loader.read_reg(addr);\n    }\n    async get_pkg_version(loader) {\n        const word3 = await this.read_efuse(loader, 3);\n        let pkg_version = (word3 >> 9) & 0x07;\n        pkg_version += ((word3 >> 2) & 0x1) << 3;\n        return pkg_version;\n    }\n    async get_chip_revision(loader) {\n        const word3 = await this.read_efuse(loader, 3);\n        const word5 = await this.read_efuse(loader, 5);\n        const apb_ctl_date = await loader.read_reg(this.DR_REG_SYSCON_BASE + 0x7c);\n        const rev_bit0 = (word3 >> 15) & 0x1;\n        const rev_bit1 = (word5 >> 20) & 0x1;\n        const rev_bit2 = (apb_ctl_date >> 31) & 0x1;\n        if (rev_bit0 != 0) {\n            if (rev_bit1 != 0) {\n                if (rev_bit2 != 0) {\n                    return 3;\n                }\n                else {\n                    return 2;\n                }\n            }\n            else {\n                return 1;\n            }\n        }\n        return 0;\n    }\n    async get_chip_description(loader) {\n        const chip_desc = [\n            \"ESP32-D0WDQ6\",\n            \"ESP32-D0WD\",\n            \"ESP32-D2WD\",\n            \"\",\n            \"ESP32-U4WDH\",\n            \"ESP32-PICO-D4\",\n            \"ESP32-PICO-V3-02\",\n        ];\n        let chip_name = \"\";\n        const pkg_version = await this.get_pkg_version(loader);\n        const chip_revision = await this.get_chip_revision(loader);\n        const rev3 = chip_revision == 3;\n        const single_core = (await this.read_efuse(loader, 3)) & (1 << 0);\n        if (single_core != 0) {\n            chip_desc[0] = \"ESP32-S0WDQ6\";\n            chip_desc[1] = \"ESP32-S0WD\";\n        }\n        if (rev3) {\n            chip_desc[5] = \"ESP32-PICO-V3\";\n        }\n        if (pkg_version >= 0 && pkg_version <= 6) {\n            chip_name = chip_desc[pkg_version];\n        }\n        else {\n            chip_name = \"Unknown ESP32\";\n        }\n        if (rev3 && (pkg_version === 0 || pkg_version === 1)) {\n            chip_name += \"-V3\";\n        }\n        return chip_name + \" (revision \" + chip_revision + \")\";\n    }\n    async get_chip_features(loader) {\n        const features = [\"Wi-Fi\"];\n        const word3 = await this.read_efuse(loader, 3);\n        const chip_ver_dis_bt = word3 & (1 << 1);\n        if (chip_ver_dis_bt === 0) {\n            features.push(\" BT\");\n        }\n        const chip_ver_dis_app_cpu = word3 & (1 << 0);\n        if (chip_ver_dis_app_cpu !== 0) {\n            features.push(\" Single Core\");\n        }\n        else {\n            features.push(\" Dual Core\");\n        }\n        const chip_cpu_freq_rated = word3 & (1 << 13);\n        if (chip_cpu_freq_rated !== 0) {\n            const chip_cpu_freq_low = word3 & (1 << 12);\n            if (chip_cpu_freq_low !== 0) {\n                features.push(\" 160MHz\");\n            }\n            else {\n                features.push(\" 240MHz\");\n            }\n        }\n        const pkg_version = await this.get_pkg_version(loader);\n        if ([2, 4, 5, 6].indexOf(pkg_version) !== -1) {\n            features.push(\" Embedded Flash\");\n        }\n        if (pkg_version === 6) {\n            features.push(\" Embedded PSRAM\");\n        }\n        const word4 = await this.read_efuse(loader, 4);\n        const adc_vref = (word4 >> 8) & 0x1f;\n        if (adc_vref !== 0) {\n            features.push(\" VRef calibration in efuse\");\n        }\n        const blk3_part_res = (word3 >> 14) & 0x1;\n        if (blk3_part_res !== 0) {\n            features.push(\" BLK3 partially reserved\");\n        }\n        const word6 = await this.read_efuse(loader, 6);\n        const coding_scheme = word6 & 0x3;\n        const coding_scheme_arr = [\"None\", \"3/4\", \"Repeat (UNSUPPORTED)\", \"Invalid\"];\n        features.push(\" Coding Scheme \" + coding_scheme_arr[coding_scheme]);\n        return features;\n    }\n    async get_crystal_freq(loader) {\n        const uart_div = (await loader.read_reg(this.UART_CLKDIV_REG)) & this.UART_CLKDIV_MASK;\n        const ets_xtal = (loader.transport.baudrate * uart_div) / 1000000 / this.XTAL_CLK_DIVIDER;\n        let norm_xtal;\n        if (ets_xtal > 33) {\n            norm_xtal = 40;\n        }\n        else {\n            norm_xtal = 26;\n        }\n        if (Math.abs(norm_xtal - ets_xtal) > 1) {\n            loader.info(\"WARNING: Unsupported crystal in use\");\n        }\n        return norm_xtal;\n    }\n    _d2h(d) {\n        const h = (+d).toString(16);\n        return h.length === 1 ? \"0\" + h : h;\n    }\n    async read_mac(loader) {\n        let mac0 = await this.read_efuse(loader, 1);\n        mac0 = mac0 >>> 0;\n        let mac1 = await this.read_efuse(loader, 2);\n        mac1 = mac1 >>> 0;\n        const mac = new Uint8Array(6);\n        mac[0] = (mac1 >> 8) & 0xff;\n        mac[1] = mac1 & 0xff;\n        mac[2] = (mac0 >> 24) & 0xff;\n        mac[3] = (mac0 >> 16) & 0xff;\n        mac[4] = (mac0 >> 8) & 0xff;\n        mac[5] = mac0 & 0xff;\n        return (this._d2h(mac[0]) +\n            \":\" +\n            this._d2h(mac[1]) +\n            \":\" +\n            this._d2h(mac[2]) +\n            \":\" +\n            this._d2h(mac[3]) +\n            \":\" +\n            this._d2h(mac[4]) +\n            \":\" +\n            this._d2h(mac[5]));\n    }\n}\n","export class ROM {\n    get_erase_size(offset, size) {\n        return size;\n    }\n}\n"],"names":["ESP32ROM","arguments","CHIP_NAME","IMAGE_CHIP_ID","EFUSE_RD_REG_BASE","DR_REG_SYSCON_BASE","UART_CLKDIV_REG","UART_CLKDIV_MASK","UART_DATE_REG_ADDR","XTAL_CLK_DIVIDER","FLASH_SIZES","FLASH_WRITE_SIZE","BOOTLOADER_FLASH_OFFSET","SPI_REG_BASE","SPI_USR_OFFS","SPI_USR1_OFFS","SPI_USR2_OFFS","SPI_W0_OFFS","SPI_MOSI_DLEN_OFFS","SPI_MISO_DLEN_OFFS","TEXT_START","ESP32_STUB","ENTRY","DATA_START","ROM_DATA","ROM_TEXT","loader","offset","addr","this","debug","read_reg","read_efuse","word3","pkg_version","word5","apb_ctl_date","rev_bit1","rev_bit2","chip_desc","chip_name","get_pkg_version","get_chip_revision","chip_revision","rev3","features","push","indexOf","word4","word6","coding_scheme","coding_scheme_arr","uart_div","ets_xtal","transport","baudrate","norm_xtal","Math","abs","info","d","h","toString","length","mac0","mac1","mac","Uint8Array","_d2h","ROM","size"],"sourceRoot":""}